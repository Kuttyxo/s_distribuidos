version: '3.8'

services:
  mongodb:
    image: mongo:5.0
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  scraper:
    build: ./scraper
    container_name: waze_scraper
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      MONGO_URI: "mongodb://root:example@mongodb:27017/traffic_data?authSource=admin"
      SCRAPER_INTERVAL_MINUTES: "1"
    volumes:
      - ./scraper:/app
    restart: unless-stopped

  storage:
    build: ./storage
    container_name: traffic_storage
    environment:
      MONGO_URI: "mongodb://root:example@mongodb:27017/traffic_data?authSource=admin"
    ports:
      - "5001:5001"
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./storage:/app

  exporter:
    build: ./exporter
    container_name: mongo_exporter
    depends_on:
      - mongodb
    volumes:
      - ./pig/data:/data  # compartido con Pig
    environment:
      MONGO_URI: "mongodb://root:example@mongodb:27017"
      MONGO_DB: "traffic_data"

  pig:
    build:
      context: ./docker/pig
    container_name: pig_processor
    depends_on:
      - exporter
    volumes:
      - ./pig:/pig  # Montar todo el directorio pig
    working_dir: /pig
    entrypoint: ["tail", "-f", "/dev/null"]  # Para que quede corriendo y puedas usar `docker exec`

volumes:
  mongo_data:
